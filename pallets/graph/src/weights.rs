// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_graph
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-06-10, STEPS: `7`, REPEAT: 3, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/mrc-collator
// benchmark
// --chain
// dev
// --execution
// wasm
// --wasm-execution
// compiled
// --pallet
// pallet_graph
// --extrinsic
// *
// --steps
// 7
// --repeat
// 3
// --output
// ./pallets/graph/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_graph.
pub trait WeightInfo {
	fn add_node(n: u32, ) -> Weight;
	fn follow(n: u32, ) -> Weight;
	fn unfollow(n: u32, ) -> Weight;
	fn follow2(n: u32, ) -> Weight;
	fn unfollow2(n: u32, ) -> Weight;
	fn follow3(n: u32, ) -> Weight;
	fn unfollow3(n: u32, ) -> Weight;
}

/// Weights for pallet_graph using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Graph Nodes (r:1 w:1)
	// Storage: Graph NodeCount (r:1 w:1)
	fn add_node(n: u32, ) -> Weight {
		(13_687_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((7_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Graph Nodes (r:2 w:0)
	// Storage: Graph Graph (r:1 w:1)
	// Storage: Graph EdgeCount (r:1 w:1)
	fn follow(_n: u32, ) -> Weight {
		(56_201_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Graph Nodes (r:2 w:0)
	// Storage: Graph EdgeCount (r:1 w:1)
	// Storage: Graph Graph (r:1 w:1)
	fn unfollow(_n: u32, ) -> Weight {
		(58_009_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Graph Nodes (r:2 w:0)
	// Storage: Graph Graph2 (r:1 w:1)
	// Storage: Graph EdgeCount (r:1 w:1)
	fn follow2(_n: u32, ) -> Weight {
		(84_141_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Graph Graph2 (r:1 w:1)
	// Storage: Graph EdgeCount (r:1 w:1)
	fn unfollow2(n: u32, ) -> Weight {
		(65_526_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Graph Nodes (r:2 w:0)
	// Storage: unknown [0x9ea2d098b5f70192f96c06f38d3fbc970100000000000000] (r:1 w:1)
	fn follow3(_n: u32, ) -> Weight {
		(97_196_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Graph Nodes (r:1 w:0)
	// Storage: unknown [0x9ea2d098b5f70192f96c06f38d3fbc970100000000000000] (r:1 w:1)
	fn unfollow3(_n: u32, ) -> Weight {
		(90_140_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Graph Nodes (r:1 w:1)
	// Storage: Graph NodeCount (r:1 w:1)
	fn add_node(n: u32, ) -> Weight {
		(13_687_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((7_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: Graph Nodes (r:2 w:0)
	// Storage: Graph Graph (r:1 w:1)
	// Storage: Graph EdgeCount (r:1 w:1)
	fn follow(_n: u32, ) -> Weight {
		(56_201_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: Graph Nodes (r:2 w:0)
	// Storage: Graph EdgeCount (r:1 w:1)
	// Storage: Graph Graph (r:1 w:1)
	fn unfollow(_n: u32, ) -> Weight {
		(58_009_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: Graph Nodes (r:2 w:0)
	// Storage: Graph Graph2 (r:1 w:1)
	// Storage: Graph EdgeCount (r:1 w:1)
	fn follow2(_n: u32, ) -> Weight {
		(84_141_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: Graph Graph2 (r:1 w:1)
	// Storage: Graph EdgeCount (r:1 w:1)
	fn unfollow2(n: u32, ) -> Weight {
		(65_526_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: Graph Nodes (r:2 w:0)
	// Storage: unknown [0x9ea2d098b5f70192f96c06f38d3fbc970100000000000000] (r:1 w:1)
	fn follow3(_n: u32, ) -> Weight {
		(97_196_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Graph Nodes (r:1 w:0)
	// Storage: unknown [0x9ea2d098b5f70192f96c06f38d3fbc970100000000000000] (r:1 w:1)
	fn unfollow3(_n: u32, ) -> Weight {
		(90_140_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
}