// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_graph
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-08-04, STEPS: `5`, REPEAT: 3, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("frequency_dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/frequency
// benchmark
// pallet
// --chain
// frequency_dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// pallet_graph
// --extrinsic
// *
// --steps
// 5
// --repeat
// 3
// --output
// ./pallets/graph/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(
	rustdoc::all,
	missing_docs,
	unused_parens,
	unused_imports
)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_graph.
pub trait WeightInfo {
	fn add_node(n: u32, ) -> Weight;
	fn follow_adj(n: u32, ) -> Weight;
	fn unfollow_adj(n: u32, ) -> Weight;
	fn follow_map(n: u32, ) -> Weight;
	fn unfollow_map(n: u32, ) -> Weight;
	fn follow_child_public(n: u32, p: u32, ) -> Weight;
	fn unfollow_child_public(n: u32, p: u32, ) -> Weight;
}

/// Weights for pallet_graph using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Graph Nodes (r:1 w:1)
	// Storage: Graph NodeCount (r:1 w:1)
	fn add_node(n: u32, ) -> Weight {
		(17_295_000 as Weight)
			// Standard Error: 11_000
			.saturating_add((7_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Graph Nodes (r:2 w:0)
	// Storage: Graph GraphAdj (r:1 w:1)
	// Storage: Graph EdgeCount (r:1 w:1)
	fn follow_adj(n: u32, ) -> Weight {
		(27_261_000 as Weight)
			// Standard Error: 56_000
			.saturating_add((68_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Graph Nodes (r:2 w:0)
	// Storage: Graph EdgeCount (r:1 w:1)
	// Storage: Graph GraphAdj (r:1 w:1)
	fn unfollow_adj(_n: u32, ) -> Weight {
		(29_851_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Graph Nodes (r:2 w:0)
	// Storage: Graph GraphMap (r:1 w:1)
	// Storage: Graph EdgeCount (r:1 w:1)
	fn follow_map(n: u32, ) -> Weight {
		(40_491_000 as Weight)
			// Standard Error: 90_000
			.saturating_add((64_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Graph GraphMap (r:1 w:1)
	// Storage: Graph EdgeCount (r:1 w:1)
	fn unfollow_map(n: u32, ) -> Weight {
		(50_471_000 as Weight)
			// Standard Error: 62_000
			.saturating_add((19_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Graph Nodes (r:2 w:0)
	// Storage: unknown [0xe8031400] (r:1 w:1)
	// Storage: unknown [0xe8030000] (r:1 w:1)
	// Storage: unknown [0xe8030400] (r:1 w:1)
	// Storage: unknown [0xe8030800] (r:1 w:1)
	// Storage: unknown [0xe8030c00] (r:1 w:1)
	// Storage: unknown [0xe8031000] (r:1 w:1)
	fn follow_child_public(n: u32, p: u32, ) -> Weight {
		(49_638_000 as Weight)
			// Standard Error: 41_000
			.saturating_add((32_000 as Weight).saturating_mul(n as Weight))
			// Standard Error: 209_000
			.saturating_add((482_000 as Weight).saturating_mul(p as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Graph Nodes (r:1 w:0)
	// Storage: unknown [0xe8031400] (r:1 w:1)
	// Storage: unknown [0xe8030000] (r:1 w:1)
	// Storage: unknown [0xe8030400] (r:1 w:1)
	// Storage: unknown [0xe8030800] (r:1 w:1)
	// Storage: unknown [0xe8030c00] (r:1 w:1)
	// Storage: unknown [0xe8031000] (r:1 w:1)
	fn unfollow_child_public(n: u32, _p: u32, ) -> Weight {
		(56_888_000 as Weight)
			// Standard Error: 52_000
			.saturating_add((20_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Graph Nodes (r:1 w:1)
	// Storage: Graph NodeCount (r:1 w:1)
	fn add_node(n: u32, ) -> Weight {
		(17_295_000 as Weight)
			// Standard Error: 11_000
			.saturating_add((7_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: Graph Nodes (r:2 w:0)
	// Storage: Graph GraphAdj (r:1 w:1)
	// Storage: Graph EdgeCount (r:1 w:1)
	fn follow_adj(n: u32, ) -> Weight {
		(27_261_000 as Weight)
			// Standard Error: 56_000
			.saturating_add((68_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: Graph Nodes (r:2 w:0)
	// Storage: Graph EdgeCount (r:1 w:1)
	// Storage: Graph GraphAdj (r:1 w:1)
	fn unfollow_adj(_n: u32, ) -> Weight {
		(29_851_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: Graph Nodes (r:2 w:0)
	// Storage: Graph GraphMap (r:1 w:1)
	// Storage: Graph EdgeCount (r:1 w:1)
	fn follow_map(n: u32, ) -> Weight {
		(40_491_000 as Weight)
			// Standard Error: 90_000
			.saturating_add((64_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: Graph GraphMap (r:1 w:1)
	// Storage: Graph EdgeCount (r:1 w:1)
	fn unfollow_map(n: u32, ) -> Weight {
		(50_471_000 as Weight)
			// Standard Error: 62_000
			.saturating_add((19_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: Graph Nodes (r:2 w:0)
	// Storage: unknown [0xe8031400] (r:1 w:1)
	// Storage: unknown [0xe8030000] (r:1 w:1)
	// Storage: unknown [0xe8030400] (r:1 w:1)
	// Storage: unknown [0xe8030800] (r:1 w:1)
	// Storage: unknown [0xe8030c00] (r:1 w:1)
	// Storage: unknown [0xe8031000] (r:1 w:1)
	fn follow_child_public(n: u32, p: u32, ) -> Weight {
		(49_638_000 as Weight)
			// Standard Error: 41_000
			.saturating_add((32_000 as Weight).saturating_mul(n as Weight))
			// Standard Error: 209_000
			.saturating_add((482_000 as Weight).saturating_mul(p as Weight))
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Graph Nodes (r:1 w:0)
	// Storage: unknown [0xe8031400] (r:1 w:1)
	// Storage: unknown [0xe8030000] (r:1 w:1)
	// Storage: unknown [0xe8030400] (r:1 w:1)
	// Storage: unknown [0xe8030800] (r:1 w:1)
	// Storage: unknown [0xe8030c00] (r:1 w:1)
	// Storage: unknown [0xe8031000] (r:1 w:1)
	fn unfollow_child_public(n: u32, _p: u32, ) -> Weight {
		(56_888_000 as Weight)
			// Standard Error: 52_000
			.saturating_add((20_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
}
